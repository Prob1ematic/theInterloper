package theInterloper.cards;

import com.megacrit.cardcrawl.actions.AbstractGameAction;
import com.megacrit.cardcrawl.actions.common.DamageAction;
import com.megacrit.cardcrawl.actions.common.RemoveSpecificPowerAction;
import com.megacrit.cardcrawl.cards.DamageInfo;
import com.megacrit.cardcrawl.characters.AbstractPlayer;
import com.megacrit.cardcrawl.core.CardCrawlGame;
import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
import com.megacrit.cardcrawl.localization.CardStrings;
import com.megacrit.cardcrawl.monsters.AbstractMonster;
import com.megacrit.cardcrawl.powers.VulnerablePower;
import theInterloper.InterloperMod;
import theInterloper.characters.TheInterloper;

import static theInterloper.InterloperMod.makeCardPath;

public class Exploit extends AbstractInterloperCard {


    public static final String ID = InterloperMod.makeID("Exploit");
    private static final CardStrings cardStrings = CardCrawlGame.languagePack.getCardStrings(ID);
    public static final String IMG = makeCardPath("Attack.png");

    public static final String NAME = cardStrings.NAME;
    public static final String DESCRIPTION = cardStrings.DESCRIPTION;
    public static final String UPGRADE_DESCRIPTION = cardStrings.UPGRADE_DESCRIPTION;

    private static final CardRarity RARITY = CardRarity.COMMON;
    private static final CardTarget TARGET = CardTarget.ENEMY;
    private static final CardType TYPE = CardType.ATTACK;
    public static final CardColor COLOR = TheInterloper.Enums.COLOR_BROWN;

    private static final int COST = 1;
    private static final int DAMAGE = 2;
    private static final int UPGRADE_BONUS = 1;

    public int multihit;

    public Exploit() {
        super(ID, NAME, IMG, COST, DESCRIPTION, TYPE, COLOR, RARITY, TARGET);
        baseDamage = DAMAGE;
        isMultiDamage = true;
        this.multihit = 0;
    }

    @Override
    public void use(AbstractPlayer p, AbstractMonster m) {
        int howMany = multihit;
        for (int i = 0; i < howMany; i++) {
            AbstractDungeon.actionManager.addToBottom(
                    new DamageAction(m, new DamageInfo(p, damage, damageTypeForTurn),
                            AbstractGameAction.AttackEffect.FIRE));
        }
        AbstractDungeon.actionManager.addToBottom(new RemoveSpecificPowerAction(m, m, VulnerablePower.POWER_ID));
    }

    @Override
    public void upgrade() {
        if (!upgraded) {
            upgradeName();
            upgradeDamage(UPGRADE_BONUS);
            initializeDescription();
        }
    }

    @Override
    public float calculateModifiedCardDamage(AbstractPlayer player, AbstractMonster mo, float tmp) {
        //int dmg = 0;
        //if (mo == null || mo.maxHealth == 0) {
        //    magicNumber = baseMagicNumber = 0;
        //    return dmg;
        //} else if (mo.hasPower(VulnerablePower.POWER_ID)) {
        //    magicNumber = baseMagicNumber = mo.getPower(VulnerablePower.POWER_ID).amount;
        //    if (!upgraded) {
        //        return 2;
        //    } else {
        //        return 3;
        //    }
        //} else {
        //    return dmg;
        //}
        if (mo == null || mo.maxHealth == 0) {
            this.multihit = 0;
        }else{
            int stacks = 0;
            if(mo.getPower(VulnerablePower.POWER_ID) != null){
                stacks = mo.getPower(VulnerablePower.POWER_ID).amount;
            }
            this.multihit = 0 + stacks;
        }
        //if (!upgraded) {
        //    return 2;
        //} else {
        //    return 3;
        //}
        return tmp;
    }
}